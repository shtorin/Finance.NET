name: "Tests"

on:
  push:
    branches: [ develop, main]
  schedule:
    - cron: '0 2 * * *'  # each day at 2 AM UTC

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      Solution_Name: "Finance.NET.sln"
      Test_Project_Path: "tests/Tests.csproj"       
      FORCE_COLOR: "true"
      DOTNET_LOGGING__CONSOLE__COLORBEHAVIOR: Enabled

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: develop
        fetch-depth: 0 

    - name: Initialize dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x

    - name: Set up .NET tools
      run: |        
        dotnet tool install --global dotnet-reportgenerator-globaltool        
        dotnet tool install --global dotnet-sonarscanner       

    - name: Restore
      run: dotnet restore "${{ env.Solution_Name }}"

    # - name: Build
    #   run: dotnet build "${{ env.Solution_Name }}" --configuration Release --no-restore

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GH_APIKEY }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: bash
      run: |
          dotnet-sonarscanner begin \
          /k:"thorstenalpers_Finance.NET" \
          /o:"thorstenalpers" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.scanner.scanAll=false \
          /d:sonar.sources="src" \
          /d:sonar.tests="tests" \
          /d:sonar.test.inclusions="tests/**/*.cs" \
          /d:sonar.exclusions="**/*.html"

          dotnet build "${{ env.Solution_Name }}" --configuration Release --no-restore
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    - name: Run tests
      shell: pwsh
      run: |
          dotnet test "${{ env.Test_Project_Path }}" --collect:"XPlat Code Coverage" --results-directory ./TestResults/Tests --configuration Release --logger "console;verbosity=detailed"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Tests failed"
            exit 1
          }
          reportgenerator -reports:./TestResults/Tests/**/coverage.cobertura.xml -targetdir:./TestResults/Reports -reporttypes:"Html;lcov;SonarQube;Cobertura"
      env:
          FinanceNet__AlphaVantageApiKey: ${{ secrets.ALPHAVANTAGEAPIKEY }}

    - name: Upload code coverage to SonarCloud
      shell: bash
      run: |
        curl -u ${{ secrets.SONAR_TOKEN }} \
          -X POST \
          -F "file=@./TestResults/Reports/SonarQube.xml" \
          "https://sonarcloud.io/api/qualitygates/project_status?projectKey=thorstenalpers_Finance.NET"
        # Verify if the analysis passed
        curl -u ${{ secrets.SONAR_TOKEN }} \
          "https://sonarcloud.io/api/qualitygates/project_status?projectKey=thorstenalpers_Finance.NET"

    # - name: Set up SonarCloud
    #   uses: SonarSource/sonarqube-scan-action@v4
    #   with:
    #     args: >
    #       -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
    #       -Dsonar.organization=${{ secrets.SONAR_ORG }}
    #       -Dsonar.token=${{ secrets.SONAR_TOKEN }}
    #       -Dsonar.coverageReportPaths=./TestResults/Reports/SonarQube.xml
    #       -Dsonar.sources=src
    #       -Dsonar.tests=tests
    #       -Dsonar.scanner.scanAll=false
    #       -Dsonar.test.exclusions=tests/**
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Upload to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        path-to-lcov: ./TestResults/Reports/lcov.info
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
           
    - name: Upload to GitHub
      uses: actions/upload-artifact@v4.4.3
      with:
        name: unit-test-coverage-report
        path: ./TestResults/Reports


